
buildscript {
    repositories {
        gradlePluginPortal()
    }
}

plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.7'
    id "maven-publish"
}

java {
	disableAutoTargetJvm()
}

allprojects {
    repositories {
        mavenCentral()
        maven {
            name = "sonatype-oss-snapshots1"
            url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            mavenContent { snapshotsOnly() }
        }
        maven {
            name = 'paper-repo'
            url = 'https://repo.papermc.io/repository/maven-public/'
        }
        maven {
            name = 'spigotmc-repo'
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
            name = "sponge-repo"
            url = "https://repo.spongepowered.org/repository/maven-public/"
        }
        maven {
            name = 'placeholderapi-repo'
            url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
        maven {
            name = 'sonatype-snapshots'
            url = "https://oss.sonatype.org/content/repositories/snapshots"
            mavenContent {
                snapshotsOnly()
            }
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
    }

    def targetJavaVersion = 8
    def encoding = 'UTF-8'
    group = 'me.chrommob'
    version = '3.4.5'
    shadowJar {
        setArchiveFileName("${project.name}-${project.version}.jar")
        destinationDirectory = file("${projectDir}/build/libs/")
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release = targetJavaVersion
        }
        options.encoding = encoding
        options.compilerArgs << "-Xlint:all" << "-Xlint:-processing"
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

subprojects {
    apply plugin: 'java'
    if (project.name != "MineStore-Fabric") {
        apply plugin: 'io.github.goooler.shadow'
    }

    dependencies {
        compileOnly 'com.google.code.gson:gson:2.8.9'
    }

    if (project.name != "common" && project.name != "MineStore-API" && project.name != "MineStore-ClassLoader") {
        dependencies {
            compileOnly project(path: ':common', configuration: 'shadow')
            compileOnly project(path: ':MineStore-ClassLoader', configuration: 'shadow')
            compileOnly project(path: ':MineStore-API', configuration: 'shadow')
        }
    }

    dependencies {
        testImplementation 'junit:junit:4.13.2'
    }

    processResources {
        def props = [version: project.version, "@version@": project.version]
        inputs.properties props
        filteringCharset 'UTF-8'
        filesMatching('plugin.yml') {
            expand props
        }

        filesMatching('bungee.yml') {
            expand props
        }

        filesMatching("fabric.mod.json") {
            expand props
        }
    }
}



def fabricProject = project(":fabric:fabric-plugin")
def finalJar = tasks.register('finalJar', Jar) {
    dependsOn processResources
    group = 'build'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from zipTree(shadowJar.archiveFile)
    archiveClassifier = "final"
    archiveFileName = "${project.name}-${project.version}.jar"
    destinationDirectory = file("${projectDir}/build/libs/")
}

finalJar.configure {
    dependsOn fabricProject.tasks.remapJar
    dependsOn project(":fabric:fabric-impl").tasks.named("remapJar")
}

fabricProject.afterEvaluate {
    finalJar.configure {
        from zipTree(fabricProject.tasks.named("remapJar", AbstractArchiveTask).flatMap {
            it.archiveFile
        })
    }
}

project(":fabric:fabric-impl").afterEvaluate {
    finalJar.configure {
        copy {
            from(project(":fabric:fabric-impl").tasks.named("remapJar")) {
                rename { "MineStore-Fabric.jarjar" }
            }
            into("src/main/resources/jars")
        }
    }
}


def addonApiProject = project(":MineStore-API")
publishing {
    publications {
        mavenJava(MavenPublication) {
            from addonApiProject.components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

tasks.generateMetadataFileForMavenJavaPublication.dependsOn addonApiProject.tasks.jar

tasks.register("copyJar", Copy) {
    dependsOn(":bukkit:bukkit-impl:shadowJar")
    dependsOn(":bungee:bungee-impl:shadowJar")
    dependsOn(":velocity:velocity-impl:shadowJar")
    dependsOn(":common:shadowJar")

    doFirst {
        delete("src/main/resources/jars/**.jar")
    }
    from(project(":bukkit:bukkit-impl").tasks.named("shadowJar")) {
        rename { "MineStore-Bukkit.jarjar" }
    }

    from(project(":bungee:bungee-impl").tasks.named("shadowJar")) {
        rename { "MineStore-Bungee.jarjar" }
    }

    from(project(":velocity:velocity-impl").tasks.named("shadowJar")) {
        rename { "MineStore-Velocity.jarjar" }
    }

    from(project(":common").tasks.named("shadowJar")) {
        rename { "MineStore-Common.jarjar" }
    }

    into("src/main/resources/jars")
}

tasks.processResources {
    dependsOn(copyJar)
}


dependencies {
    implementation project(path: ':MineStore-ClassLoader', configuration: 'shadow')
    implementation project(path: ':bungee:bungee-plugin', configuration: 'shadow')
    implementation project(path: ':bukkit:bukkit-plugin', configuration: 'shadow')
    implementation project(path: ':velocity:velocity-plugin', configuration: 'shadow')
   // implementation project(path: ':MineStore-Fabric', configuration: 'shadow')
//    implementation project(path: ':MineStore-Sponge', configuration: 'shadow')
}