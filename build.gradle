import groovy.json.JsonSlurper;

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "8.1.0"
    id 'maven-publish'
    id("io.papermc.hangar-publish-plugin") version "0.0.5"
}

group = 'me.chrommob'
version = '0.1.2'

repositories {
    mavenCentral()
    maven {
        name = 'paper-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = "aikar-repo"
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
    maven {
        name = "sponge-repo"
        url = "https://repo.spongepowered.org/repository/maven-public/"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io/"
    }
    maven {
        name = 'placeholderapi-repo'
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT'
    compileOnly 'com.velocitypowered:velocity-api:3.1.1'
    compileOnly 'net.md-5:bungeecord-api:1.19-R0.1-SNAPSHOT'
    compileOnly 'org.spongepowered:spongeapi:7.4.0'
    compileOnly 'net.luckperms:api:5.4'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'
    compileOnly 'me.clip:placeholderapi:2.11.2'

    implementation('co.aikar:acf-paper:0.5.1-20230402.215239-24')
    implementation('co.aikar:acf-bungee:0.5.1-20230402.215239-25')
    implementation('co.aikar:acf-velocity:0.5.1-20230402.215239-24')
    annotationProcessor("com.velocitypowered:velocity-api:3.1.1")
    implementation('co.aikar:acf-sponge:0.5.1-SNAPSHOT')

    implementation('com.google.code.gson:gson:2.8.9')
    implementation "net.kyori:adventure-api:4.12.0"
    implementation "net.kyori:adventure-platform-bungeecord:4.2.0"
    implementation "net.kyori:adventure-platform-spongeapi:4.2.0"
    implementation "net.kyori:adventure-platform-bukkit:4.2.0"
    implementation "net.kyori:adventure-text-serializer-plain:4.12.0"
    implementation "net.kyori:adventure-text-minimessage:4.12.0"

    implementation 'com.zaxxer:HikariCP:4.0.3'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.2'
    implementation "com.mysql:mysql-connector-j:8.0.33"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

shadowJar {
    relocate 'com.google.gson', 'me.chrommob.minestore.libs.com.google.gson'
    relocate 'co.aikar.acf', 'me.chrommob.minestore.libs.co.aikar.acf'
    relocate 'net.kyori', 'me.chrommob.minestore.libs.net.kyori'
    relocate 'com.zaxxer', 'me.chrommob.minestore.libs.com.zaxxer'
    relocate "com.mysql", "me.chrommob.minestore.libs.com.mysql"
    relocate "org.mariadb", "me.chrommob.minestore.libs.org.mariadb"
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

def encoding = 'UTF-8'
tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
    options.encoding = encoding
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing"
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

def author = "ChromMob"
def pluginName = "MineStore"
def latestUrl = new URL("https://hangar.papermc.io/api/v1/projects/${author}/${pluginName}/latestrelease").openConnection()
latestUrl.setRequestProperty("User-Agent", "Mozilla/5.0")
latestUrl.setRequestProperty("Accept", "text/plain")
latestUrl.setRequestProperty("Content-Type", "text/plain")
latestUrl.connect()
def latestVersion = latestUrl.getInputStream().text
def currentVersion = project.version as String
if (latestVersion == currentVersion) {
    throw new GradleException("Version ${currentVersion} is already published!")
}


//def changelog = new URL(System.getenv("GITHUB_API_URL") + "/repos/" + System.getenv("GITHUB_REPOSITORY") + "/commits/" + System.getenv("GITHUB_SHA")).openConnection()
def changelogUrl = new URL("https://api.github.com/repos/ChromMob/MineStoreRecode/commits/04db5b875073fc81f25cb5344af6d5ae3711edb6").openConnection()
changelogUrl.setRequestProperty("User-Agent", "Mozilla/5.0")
changelogUrl.setRequestProperty("Accept", "application/json")
changelogUrl.setRequestProperty("Content-Type", "application/json")
def resp = new JsonSlurper().parseText(changelogUrl.getInputStream().getText())
def changelogMessage = resp.commit.message;
System.out.println(changelogMessage)


hangarPublish {
    publications.register("plugin") {
        version.set(currentVersion)
        namespace(author, pluginName)
        channel.set("Release")
        changelog.set(changelogMessage)

        // your api key.
        // defaults to the `io.papermc.hangar-publish-plugin.[publicationName].api-key` or `io.papermc.hangar-publish-plugin.default-api-key` Gradle properties
        apiKey.set(System.getenv("HANGAR_API_KEY"));
    }
}

shadowJar {
    minimize()
}
