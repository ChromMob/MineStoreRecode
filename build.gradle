
buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.github.johnrengelman:shadow:8.1.1'
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "maven-publish"
}

java {
	disableAutoTargetJvm()
}

allprojects {
        repositories {
        mavenCentral()
        maven {
            name = 'paper-repo'
            url = 'https://repo.papermc.io/repository/maven-public/'
        }
        maven {
            name = 'spigotmc-repo'
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
            name = "sponge-repo"
            url = "https://repo.spongepowered.org/repository/maven-public/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io/"
        }
        maven {
            name = 'placeholderapi-repo'
            url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
        maven {
            name = 'sonatype-snapshots'
            url = "https://oss.sonatype.org/content/repositories/snapshots"
        } 
        maven {
            name = "sonatype-oss-snapshots1"
            url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            mavenContent { snapshotsOnly()
        }
   }
    }

    def targetJavaVersion = 8
    def encoding = 'UTF-8'
    group = 'me.chrommob'
    version = '1.1.4'
    shadowJar {
        setArchiveFileName("${project.name}-${project.version}.jar")
        destinationDirectory = file("${projectDir}/build/libs/")
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release = targetJavaVersion
        }
        options.encoding = encoding
        options.compilerArgs << "-Xlint:all" << "-Xlint:-processing"
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

subprojects {
    apply plugin: 'java'
    if (project.name != "MineStore-Fabric") {
        apply plugin: 'com.github.johnrengelman.shadow'
    }

    if (project.name != "common") {
        dependencies {
            implementation project(path: ':common', configuration: 'shadow')
        }
    }

    processResources {
        def props = [version: project.version]
        inputs.properties props
        filteringCharset 'UTF-8'
        filesMatching('plugin.yml') {
            expand props
        }

        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }
}



def fabricProject = project(":MineStore-Fabric")
def velocityProject = project(":MineStore-Velocity")
def finalJar = tasks.register('finalJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from zipTree(shadowJar.archiveFile)
    archiveClassifier = "final"
    archiveFileName = "${project.name}-${project.version}.jar"
    destinationDirectory = file("${projectDir}/build/libs/")
}

fabricProject.afterEvaluate {
    finalJar.configure {
        from zipTree(fabricProject.tasks.named("remapJar", AbstractArchiveTask).flatMap {
            it.archiveFile
        })
    }
}


velocityProject.afterEvaluate {
    finalJar.configure {
        from zipTree(velocityProject.tasks.named("shadowJar", AbstractArchiveTask).flatMap {
            it.archiveFile
        })
    }
}

assemble.dependsOn(finalJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact finalJar
        }
    }
    repositories {
        mavenLocal()
    }
}
tasks.generateMetadataFileForMavenJavaPublication.dependsOn assemble



shadowJar {
    relocate "cloud.commandframework", "me.chrommob.minestore.libs.cloud.commandframework"
    relocate "com.google.gson", "me.chrommob.minestore.libs.com.google.gson"
    relocate 'com.zaxxer', 'me.chrommob.minestore.libs.com.zaxxer'
    relocate "com.mysql", "me.chrommob.minestore.libs.com.mysql"
    relocate "org.mariadb", "me.chrommob.minestore.libs.org.mariadb"
    relocate "org.yaml", "me.chrommob.minestore.libs.org.yaml"
    relocate ("net.kyori", "me.chrommob.minestore.libs.net.kyori") {
        exclude "net.kyori.adventure.platform.fabric.**"
    }
    exclude "META-INF/*.SF"
}

dependencies {
    implementation project(path: ':common', configuration: 'shadow')
    implementation project(path: ':MineStore-Bukkit', configuration: 'shadow')
    implementation project(path: ':MineStore-Bungee', configuration: 'shadow')
//    implementation project(path: ':MineStore-Sponge', configuration: 'shadow')
}